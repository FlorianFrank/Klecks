%{
#include "symtab.h"
#include <stdio.h>


%}

%union {int i; node *n; double d; }


%token <n> ID
%token SEMICOLON
%token SQOPEN SQCLOSE
%token AT

%token TYPE
%token <i> INTEGER
%token <d> DOUBLE
%token FLOAT
%token PLUS
%token MINUS
%token DIVIDE
%token TIMES
%token ASSIGN
%token OPEN
%token CLOSE

%token CIRCLE RECTANGLE TRIANGLE
%token FILL
%token COLOR
%token ROTATE
%token SCALE

%%


program: header stmtlist trailer;
stmtlist: ;
stmtlist: stmtlist stmt;


header: { printf("%%!PS-Adobe\n"
					"%%%% Generated by klx version 1.0\n");};

trailer: ;

stmt: ID ASSIGN expr SEMICOLON {printf("/%s exch def \n",$1->symbol);}
stmt: {printf("gsave\n");} options klecks {printf("grestore\n");};


klecks: color figure additionalOptions defaultcolor SEMICOLON;
figure: CIRCLE {printf("newpath 10 10 10 0 360 arc\n");};
figure: RECTANGLE {printf("newpath 0 0 moveto 0 10 rlineto 10 0 rlineto 0 10 neg rlineto 10 neg 0 rlineto\n");};
figure: TRIANGLE {printf("newpath 0 0 moveto 10 0 rlineto 5 neg 10 rlineto 5 neg 10 neg rlineto\n");};


options: ;
options: SQOPEN optionlist SQCLOSE;

additionalOptions: ;
additionalOptions: additionalOptions additionalOption;

additionalOption: ROTATE SQOPEN expr SQCLOSE {printf("rotate ");};
additionalOption: FILL {printf("fill\n");};
additionalOption: SCALE SQOPEN expr AT expr SQCLOSE {printf("scale ");};

color: ;
color: COLOR SQOPEN expr AT expr AT expr SQCLOSE {printf("setrgbcolor\n ");};
defaultcolor: {printf("0 0 0 setrgbcolor\n");};


optionlist: option;

option: expr AT expr {printf("translate\n"); };

expr: product;
expr: expr PLUS product {printf("add ");};
expr: expr MINUS product {printf("sub ");};

product: atomic; 
product: product TIMES prefix {printf("mul ");};
product: product DIVIDE prefix {printf("div ");};

prefix: atomic;
prefix: PLUS atomic;
prefix: MINUS atomic {printf("neg ");};


atomic: INTEGER {printf("%d ",$1);}
atomic: OPEN expr CLOSE;
atomic: ID {printf("%s ", $1->symbol);};

%%


int yyerror(char * msg) {
	fprintf(stderr, "ERROR: %s\n", msg);
	return 0;
}


int main(void) {
	yyparse();
	return 0;
}
